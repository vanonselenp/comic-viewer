{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["corsProxy","generateImage","next","srcs","comic","href","map","src","className","alt","comicMap","gg","startPage","getNextPage","htmldoc","localPage","s","Set","Array","from","links","filter","m","startsWith","split","forEach","add","sorted","sort","findIndex","getCurrentImages","images","getPageUrl","emp","data","length","nextcomic","console","log","App","useState","setNext","currentImages","setCurrentImages","setComic","useEffect","currentComic","window","location","includes","parameters","comicSelection","find","selection","page","url","fetch","then","response","text","DOMParser","parseFromString","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1ee0891.chunk.js","sourcesContent":["import './App.css';\nimport React, { useEffect, useState } from \"react\";\n\nconst corsProxy = \"https://warm-waters-42495.herokuapp.com/\";\n\n// const server = \"http://localhost:3000\";\nconst server = \"https://vanonselenp.github.io\";\n\nconst generateImage = (next, srcs, comic) => {\n  return (\n    <a href={`${server}/comic-viewer?page=${next}&comic=${comic}`}>\n      {srcs.map(src => (<img className=\"fit-picture\"\n            src={src}\n            alt=\"Grapefruit slice atop a pile of other slices\"/>))}\n    </a>\n  );\n}\n\nclass GirlGenius {\n  startPage = '20021104';\n\n  getNextPage = (htmldoc, localPage) => {\n    const s = new Set();\n    Array\n      .from(htmldoc.links)\n      .filter(m => m.href.startsWith('http://www.girlgeniusonline.com/comic.php?date='))\n      .map(m => m.href.split(\"=\")[1])\n      .forEach(m => s.add(m))\n\n    s.add(localPage);\n\n    const sorted = [...s].sort();\n\n    const nextcomic = sorted[sorted.findIndex(m => m === localPage) + 1];\n    return nextcomic;\n  };\n\n  getCurrentImages = (htmldoc) => {\n    const images = Array.from(htmldoc.images)\n          .map(m => m.src)\n          .filter(m => m.startsWith(\"http://www.girlgeniusonline.com/ggmain/strips/ggmain\"));\n    return images\n  }\n\n  getPageUrl = (localPage) => {\n    return `${corsProxy}https://www.girlgeniusonline.com/comic.php?date=${localPage}`;\n  };\n}\n\nclass Empowered {\n  startPage = 'volume-1-page-1';\n\n  getNextPage = (htmldoc, localPage) => {\n    const s = new Set();\n    Array\n      .from(htmldoc.links)\n      .filter(m => m.className === 'cc-next')\n      .map(m => {\n        const data = m.href.split('/');\n        return data[data.length - 1]\n      })\n      .forEach(m => s.add(m))\n\n    const sorted = [...s].sort();\n\n    const nextcomic = sorted[0];\n    console.log(nextcomic);\n    return nextcomic;\n  }\n\n  getCurrentImages = (htmldoc) => {\n    const images = Array.from(htmldoc.images)\n          .map(m => m.src)\n          .filter(m => m.startsWith(\"https://www.empoweredcomic.com/comic\"));\n    return images\n  }\n  \n  getPageUrl = (localPage) => {\n    return `${corsProxy}https://www.empoweredcomic.com/comic/${localPage}`\n  }\n}\n\nconst comicMap = {\n  gg: new GirlGenius(),\n  emp: new Empowered()\n}\n\nfunction App() {\n  const [next, setNext] = useState(\"\");\n  const [currentImages, setCurrentImages] = useState([]);\n  const [comic, setComic] = useState('gg');\n\n\n  useEffect(() => {\n    let localPage;\n    let currentComic;\n\n    if(window.location.href.includes(\"?\")) {\n      const parameters = window.location.href.split('?')[1].split('&');\n     \n      const comicSelection = parameters.find(m => m.startsWith('comic'));\n      if(comicSelection) {\n        const selection = comicSelection.split('=')[1];\n        setComic(selection)\n        currentComic = comicMap[selection];\n      }\n\n      const page = parameters.find(m => m.startsWith('page'));\n      if(page) {\n        localPage = page.split('=')[1];\n      } else {\n        localPage = currentComic.startPage;\n      }\n\n    } else {\n      currentComic = comicMap['gg'];\n      localPage = currentComic.startPage;\n    }\n    \n    const url = currentComic.getPageUrl(localPage);\n    fetch(url)\n      .then(response => response.text())\n      .then(data => { \n        const parser = new DOMParser();\n        const htmldoc = parser.parseFromString(data, \"text/html\");\n\n        setNext(currentComic.getNextPage(htmldoc, localPage));\n        setCurrentImages(currentComic.getCurrentImages(htmldoc));\n      });\n  }, []);\n\n\n  if (next !== \"\")\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {generateImage(next, currentImages, comic)}\n        </header>\n      </div>\n    );\n  else\n      return (<></>);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}