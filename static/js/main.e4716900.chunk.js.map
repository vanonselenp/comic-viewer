{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["server","console","log","generateImage","next","src","href","className","alt","App","useState","setNext","setPath","currentImage","setCurrentImage","useEffect","localDate","window","location","includes","currentDate","split","length","url","date","ggurl","fetch","then","response","text","data","htmldoc","DOMParser","parseFromString","links","Set","Array","from","filter","m","startsWith","forEach","add","nextComic","values","size","image","images","map","find","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAQMA,EAAS,wBAGfC,QAAQC,IAAIF,GAEZ,IAAMG,EAAgB,SAACC,EAAcC,GACnC,OACE,mBAAGC,KAAI,UAAKN,EAAL,yBAA4BI,GAAnC,SACM,qBAAKG,UAAU,cACbF,IAAKA,EACLG,IAAI,oDA2DDC,MAtDf,WAEE,MAAwBC,mBAAS,IAAjC,mBAAON,EAAP,KAAaO,EAAb,KACA,EAAwBD,mBAAS,IAAjC,mBAAaE,GAAb,WACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAsCA,OApCAC,qBAAU,WACR,IAAIC,EA1BK,WA2BT,GAAGC,OAAOC,SAASZ,KAAKa,SAAS,KAAM,CACrC,IAAMC,EAAcH,OAAOC,SAASZ,KAAKe,MAAM,KAC/CL,EAAYI,EAAYA,EAAYE,OAAS,GAG/CV,EAAQI,GAER,IAAMO,EAAG,UAjCK,4CAiCL,OAhCC,SAACC,GAAD,gEAAqEA,GAgCpDC,CAAMT,IACjCU,MAAMH,GACHI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,IACMC,GADS,IAAIC,WACIC,gBAAgBH,EAAM,aAEvCI,EAAQ,IAAIC,IAClBC,MACGC,KAAKN,EAAQG,OACbI,QAAO,SAAAC,GAAC,OAAIA,EAAEjC,KAAKkC,WAAW,sDAC9BC,SAAQ,SAAAF,GAAC,OAAIL,EAAMQ,IAAIH,EAAEjC,SAE5B,IAEMqC,EAFsBP,MAAMC,KAAKH,EAAMU,UAAUV,EAAMW,KAAO,GAE5CxB,MAAM,KAC9BV,EAAQgC,EAAUA,EAAUrB,OAAS,IAErC,IAAMwB,EAAQV,MAAMC,KAAKN,EAAQgB,QAChCC,KAAI,SAAAT,GAAC,OAAIA,EAAElC,OACX4C,MAAK,SAAAV,GAAC,OAAIA,EAAEC,WAAW,2DAExB1B,EAAgB,GAAD,OAAIgC,SAEtB,IAGS,IAAR1C,EAEA,qBAAKG,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACGJ,EAAcC,EAAMS,OAKjB,8BC5DCqC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.e4716900.chunk.js","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React, { useEffect, useState } from \"react\";\n\nconst date = \"20021104\";\nconst corsProxy = \"https://warm-waters-42495.herokuapp.com/\";\nconst ggurl = (date: string) => `https://www.girlgeniusonline.com/comic.php?date=${date}`;\n\nconst server = \"http://localhost:3000\";\n// const server = \"https://vanonselenp.github.io\";\n\nconsole.log(server);\n\nconst generateImage = (next: string, src: string) => {\n  return (\n    <a href={`${server}/comic-viewer?${next}`}>\n          <img className=\"fit-picture\"\n            src={src}\n            alt=\"Grapefruit slice atop a pile of other slices\"/>\n    </a>\n  );\n}\n\nfunction App() {\n  // const [image, setImage] = useState(\"\");\n  const [next, setNext] = useState(\"\");\n  const [path, setPath] = useState(\"\");\n  const [currentImage, setCurrentImage] = useState(\"\");\n\n  useEffect(() => {\n    let localDate = date;\n    if(window.location.href.includes(\"?\")) {\n      const currentDate = window.location.href.split('?');\n      localDate = currentDate[currentDate.length - 1];\n    }\n    \n    setPath(localDate)\n    \n    const url = `${corsProxy}${ggurl(localDate)}`;\n    fetch(url)\n      .then(response => response.text())\n      .then(data => { \n        const parser = new DOMParser();\n        const htmldoc = parser.parseFromString(data, \"text/html\");\n\n        const links = new Set();\n        Array\n          .from(htmldoc.links)\n          .filter(m => m.href.startsWith('http://www.girlgeniusonline.com/comic.php?date='))\n          .forEach(m => links.add(m.href));\n\n        const first: string | any = Array.from(links.values())[links.size - 2];\n\n        const nextComic = first.split(\"=\");\n        setNext(nextComic[nextComic.length - 1]);\n\n        const image = Array.from(htmldoc.images)\n        .map(m => m.src)\n        .find(m => m.startsWith(\"http://www.girlgeniusonline.com/ggmain/strips/ggmain\"));\n\n        setCurrentImage(`${image}`);\n      });\n  }, []);\n\n\n  if (next != \"\")\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {generateImage(next, currentImage)}\n        </header>\n      </div>\n    );\n  else\n      return (<></>);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}