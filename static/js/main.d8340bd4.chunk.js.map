{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["generateImage","next","srcs","href","map","src","className","alt","App","useState","setNext","currentImages","setCurrentImages","useEffect","localDate","window","location","includes","currentDate","split","length","url","date","ggurl","fetch","then","response","text","data","htmldoc","DOMParser","parseFromString","s","Set","Array","from","links","filter","m","startsWith","forEach","add","sorted","sort","nextcomic","findIndex","images","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAUMA,EAAgB,SAACC,EAAMC,GAC3B,OACE,mBAAGC,KAAI,UALI,wBAKJ,yBAA4BF,GAAnC,SACGC,EAAKE,KAAI,SAAAC,GAAG,OAAK,qBAAKC,UAAU,cAC3BD,IAAKA,EACLE,IAAI,uDA0DDC,MArDf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOR,EAAP,KAAaS,EAAb,KACA,EAA0CD,mBAAS,IAAnD,mBAAOE,EAAP,KAAsBC,EAAtB,KAuCA,OArCAC,qBAAU,WACR,IAAIC,EAtBK,WAuBT,GAAGC,OAAOC,SAASb,KAAKc,SAAS,KAAM,CACrC,IAAMC,EAAcH,OAAOC,SAASb,KAAKgB,MAAM,KAC/CL,EAAYI,EAAYA,EAAYE,OAAS,GAG/C,IAAMC,EAAG,UA3BK,4CA2BL,OA1BC,SAACC,GAAD,gEAA6DA,GA0B5CC,CAAMT,IACjCU,MAAMH,GACHI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,IACMC,GADS,IAAIC,WACIC,gBAAgBH,EAAM,aAEvCI,EAAI,IAAIC,IACdC,MACGC,KAAKN,EAAQO,OACbC,QAAO,SAAAC,GAAC,OAAIA,EAAEnC,KAAKoC,WAAW,sDAC9BnC,KAAI,SAAAkC,GAAC,OAAIA,EAAEnC,KAAKgB,MAAM,KAAK,MAC3BqB,SAAQ,SAAAF,GAAC,OAAIN,EAAES,IAAIH,MAEtBN,EAAES,IAAI3B,GAEN,IAAM4B,EAAS,YAAIV,GAAGW,OAEhBC,EAAYF,EAAOA,EAAOG,WAAU,SAAAP,GAAC,OAAIA,IAAMxB,KAAa,GAClEJ,EAAQkC,GAER,IAAME,EAASZ,MAAMC,KAAKN,EAAQiB,QAC/B1C,KAAI,SAAAkC,GAAC,OAAIA,EAAEjC,OACXgC,QAAO,SAAAC,GAAC,OAAIA,EAAEC,WAAW,2DAE1B3B,EAAiBkC,QAEtB,IAGU,KAAT7C,EAEA,qBAAKK,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACGN,EAAcC,EAAMU,OAKjB,8BC1DCoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d8340bd4.chunk.js","sourcesContent":["import './App.css';\nimport React, { useEffect, useState } from \"react\";\n\nconst date = \"20021104\";\nconst corsProxy = \"https://warm-waters-42495.herokuapp.com/\";\nconst ggurl = (date) => `https://www.girlgeniusonline.com/comic.php?date=${date}`;\n\nconst server = \"http://localhost:3000\";\n// const server = \"https://vanonselenp.github.io\";\n\nconst generateImage = (next, srcs) => {\n  return (\n    <a href={`${server}/comic-viewer?${next}`}>\n      {srcs.map(src => (<img className=\"fit-picture\"\n            src={src}\n            alt=\"Grapefruit slice atop a pile of other slices\"/>))}\n    </a>\n  );\n}\n\nfunction App() {\n  const [next, setNext] = useState(\"\");\n  const [currentImages, setCurrentImages] = useState([]);\n\n  useEffect(() => {\n    let localDate = date;\n    if(window.location.href.includes(\"?\")) {\n      const currentDate = window.location.href.split('?');\n      localDate = currentDate[currentDate.length - 1];\n    }\n    \n    const url = `${corsProxy}${ggurl(localDate)}`;\n    fetch(url)\n      .then(response => response.text())\n      .then(data => { \n        const parser = new DOMParser();\n        const htmldoc = parser.parseFromString(data, \"text/html\");\n\n        const s = new Set();\n        Array\n          .from(htmldoc.links)\n          .filter(m => m.href.startsWith('http://www.girlgeniusonline.com/comic.php?date='))\n          .map(m => m.href.split(\"=\")[1])\n          .forEach(m => s.add(m))\n\n        s.add(localDate);\n\n        const sorted = [...s].sort();\n\n        const nextcomic = sorted[sorted.findIndex(m => m === localDate) + 1];\n        setNext(nextcomic);\n\n        const images = Array.from(htmldoc.images)\n          .map(m => m.src)\n          .filter(m => m.startsWith(\"http://www.girlgeniusonline.com/ggmain/strips/ggmain\"));\n\n          setCurrentImages(images);\n      });\n  }, []);\n\n\n  if (next !== \"\")\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {generateImage(next, currentImages)}\n        </header>\n      </div>\n    );\n  else\n      return (<></>);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}